#!/bin/bash

# Function to read config file
_read_config() {
    local readonly THE_CONFIG_FILE="$1"

    # Check if the config file exists
    if [ ! -f "$THE_CONFIG_FILE" ]; then
        echo "The config file does not exist. Please run \`bash setup\` or create file .config manually."
        echo "$TIME - The config file does not exist" >> $LOG_FILE
        exit 1
    fi

    # Read the config file line by line
    while read line; do
        case $line in
            username=*)
                readonly N_USERNAME="${line#*=}"
                ;;
            password=*)
                readonly N_PASSWORD="${line#*=}"
                ;;
            hostname=*)
                readonly N_HOSTNAME="${line#*=}"
                ;;
        esac
    done < "$THE_CONFIG_FILE"

    # Check if the config file is set properly
    if [[ -z "$N_USERNAME" || -z "$N_PASSWORD" || -z "$N_HOSTNAME" ]]; then
        echo "The config file is not set properly. Please run \`bash setup\` or create file .config manually."
        echo "$TIME - The config file is not set properly" >> $LOG_FILE
        exit 1
    fi
}

# Function to check if a string is a valid IPv4 using regex
_is_valid_ipv4() {
    local ip="$1"
    rx='([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])'  # A number from 0 to 255
    if [[ "$ip" =~ ^$rx\.$rx\.$rx\.$rx$ ]]; then
        return 0  # true
    else
        return 1  # false
    fi
}

# Function to get the public IP from various sources
_get_public_ip() {
    readonly URLS=(
        "https://icanhazip.com"
        "https://api.ipify.org"
        "http://icanhazip.com"
        "http://api.ipify.org"
        "http://myexternalip.com/raw"
    )

    for url in "${URLS[@]}"; do
        ip=$(wget -qO- "$url")  # Get the public IP using wget
        ip=${ip//[[:space:]]/}  # Remove all whitespace (including internal spaces)
        if _is_valid_ipv4 "$ip"; then
            break
        fi
    done
}

# Declare constants
readonly APP_DIR=$(cd "$(dirname "${BASH_SOURCE}")" &> /dev/null && pwd)  # Get the absolute path of the current directory
readonly DATE=$(date '+%Y%m%d')
readonly TIME=$(date '+%Y-%m-%d %H:%M')
readonly LOG_FILE="$APP_DIR/logs/$DATE.log"
readonly CONFIG_FILE="$APP_DIR/.config"
_read_config $CONFIG_FILE

# Declare variables with default values
ip=""

# Get the public IP, if failed then exit program
_get_public_ip
if [ -z "$ip" ]; then
    echo "Could not get the public IP"
    echo "$TIME - Could not get the public IP" >> $LOG_FILE
    exit 1
else
    # Update IP on No-IP server
    result=$(curl -s -X GET \
        -H "User-Agent: HungVPS NoIPUpdaterShellScript/1.0 ls@hung.vn" \
        -H "Authorization: Basic $(echo "$N_USERNAME:$N_PASSWORD" | base64)" \
        "https://dynupdate.no-ip.com/nic/update?hostname=${N_HOSTNAME}&myip=${ip}")
    echo "$TIME - $result" >> $LOG_FILE
fi
